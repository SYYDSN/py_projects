#  -*- coding:utf-8 -*-


"""原码,反码和补码"""


"""
一. 原码
1. 最高位为符号位 0表示正,1表示负
2. 数值范围: 定点整数:[-(2^(n-1)-1) <= x <= +(2^(n-1)-1)], 定点小数:[-(1-2^-(n-1)) <= x <= +(1-2^-(n-1))]
   定点整数: -127<=x<=127 定点小数: -(1-1/128)<=x<=(1-1/128)
3. 零有+0/-0两种表示方式 00000000 和 10000000

二. 反码
1. 最高位为符号位 0表示正,1表示负
2. 数值范围: 定点整数:[-(2^(n-1)-1) <= x <= +(2^(n-1)-1)], 定点小数:[-(1-2^-(n-1)) <= x <= +(1-2^-(n-1))]
   定点整数: -127<=x<=127 定点小数: -(1-1/128)<=x<=(1-1/128)
3. 零有+0/-0两种表示方式 00000000 和 11111111
4. 正数和原码相同.负数的表示方式是其的原码的绝对值按位求反 -7的反码=|-7|按位求反=~|00000111|=11111000

三. 补码
1. 最高位为符号位 0表示正,1表示负
2. 数值范围: 定点整数:[-2^(n-1) <= x <= +(2^(n-1)-1)], 定点小数:[-1 <= x <= (1-2^-(n-1))]
   定点整数: -128<=x<=127 定点小数: -1<=x<=(1-1/128)
3. 零只有一种表示方式 00000000
4. 正数和原码相同.负数的表示方式是其的反码的末尾+1(布尔运算,忽略小数点的位置)

四. 移码
1. 最高位为符号位 1表示正,0表示负
2. 数值范围: 定点整数:[-2^(n-1) <= x <= +(2^(n-1)-1)], 定点小数:[-1 <= x <= (1-2^-(n-1))]
   定点整数: -128<=x<=127 定点小数: -1<=x<=(1-1/128)
3. 零只有一种表示方式 10000000 
4. 补码的符号位取反即可
"""


def two_to_ten(raw: (int, str)) -> str:
    """
    二进制转十进制
    :param raw: 二进制的数值或者字符串
    :return: 十进制的字符串
    """
    raw = str(raw) if not isinstance(raw, str) else raw
    for x in raw:
        if int(x) > 1:
            ms = "{} 不是合法的二进制".format(raw)
            raise ValueError(ms)
    return str(int(raw, 2))


def ten_to_two(raw: (int, str)) -> str:
    """
    十进制转二进制
    :param raw: 十进制的数值或者字符串
    :return: 二进制的字符串
    """
    try:
        raw = int(raw) if not isinstance(raw, int) else raw
    except ValueError as e:
        print(e)
        ms = "{} 不是合法的十进制".format(raw)
        raise ValueError(ms)
    return bin(raw).split("0b")[-1]




if __name__ == "__main__":
    true_form(-11.51)
    pass